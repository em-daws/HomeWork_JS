//Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, 
//як відбувається перетворення в кожному прикладі:

var first = 'number' + 3 + 3; 
// 1.'number' + 3 - відбувається конкатенація рядка та числа --> 'number3'
// 2. 'number3' + 3 - знову відбувається конкатенація --> 'number33':
console.log(first);


var second = null + 3;
// null приводиться до числа 0
// 0 + 3 = 3
console.log(second);


var third = 5 && "qwerty";
// 5 приводиться до значення true
// не пуста строка "qwerty" також приводиться до true
// оператор AND проходиться по всіх операндах, і якщо всі відповідають значенню true, виводить останній з них, тому отримаємо відповідь: "qwerty"
console.log(third);


var fourth = +'40' + +'2' + "hillel";
// 1. Унарний плюс приводить строку '40' до числа --> 40
// 2. Унарний плюс приводить строку '2' до числа --> 2
// 3. Відбувається додавання: 40 + 2 --> 42
// 4. Отримуємо вираз: 42 + "hillel", відбувається конкатенація --> "42hillel"
console.log(fourth);


var fifth = '10' - 5 === 6;
// 1. Строка '10' приводиться до числа --> 10
// 2. Відбувається віднімання: 10 - 5 --> 5
// 3. Порівняння: 5 === 6 --> результат буде: false
console.log(fifth);


var sixth = true + false;
// При арифметичній операції булеанові значення приводяться до чисел:
// true --> 1
// false --> 0
// Тому отримуємо вираз: 1 + 0
// Результатом буде: 1
console.log(sixth);


var seventh = '4px' - 3;
// JS спробує привести строку до числа, але оскільки строка '4px' містить також і букви, приведення до числа неможливе,
// отже результатом операції буде Nan (бо "Nan - 3 = NaN")
console.log(seventh);


var eighth = '4' - 3;
// 1. Строка '4' приводиться до числа --> 4
// 2. Операція віднімання: 4 - 3 --> 1
// Результат: 1
console.log(eighth);


var ninth = '6' + 3 ** 0;
// 1. Зведення в ступінь має вищий пріоритет, тому 3 ** 0 --> 1
// 2. '6' залишається строкою, відбувається конкатенація: '6' + 1 --> '61'
// Результат: '61'
console.log(ninth);


var tenth = 12 / '6';
// 1. Строка '6' приводиться до числа --> 6
// 2. Відбувається ділення: 12 / 6 --> 2
console.log(tenth); 


var eleventh = '10' + (5 === 6);
// 1. Відбувається порівняння в дужках: 5 === 6 --> false
// 2. 'false' приводиться до строки
// 3. Відбувається конкатенація: '10' + 'false' --> '10false'
console.log(eleventh);


var twelfth = null == '';
// 1. При порівнянні значення 'null' може бути приведене тільки до undefined (null == undefined), 
// пустий рядок не може бути приведений ні до null, ні до undefined
// Документація з JS щодо '==': If one of the operands is null or undefined, the other must also be null or undefined to return true. Otherwise return false.
// 2. Враховуючи, що тільки undefined і null рівні один одному (і ніщо більше), отримуємо результат false
console.log(twelfth);


var thirteenth = 3 ** (9 / 3);
// 1. За правилами математики - спочатку виконується операція в дужках: (9/3) --> 3
// 2. Потім виконується операція зведення в ступінь: 3 ** 3 --> 27
console.log(thirteenth);


var fourteenth = !!'false' == !!'true';
// 1. Першим ділом виконується операція інвертації буленового значення для "!!'false'":
// де строка 'false' приводиться до значення true, бо будь-яка не пуста строка є true; 
// 2. Далі приміняється інвертор і виконується операція "!true" - то результат цієї операції - false
// 3. Оскільки маємо два інвентора "!!" - то ще раз проводимо операцію інвертації - на цей раз для виразу "!false" - результатом операції є true 
// 4. Все те саме проробляємо для операції "!!'true'", де рядок 'true' також приводиться до значення true, і залишається true після подвійної інвертації
// Отже, результатом порівняння 'true == true' є --> true 
console.log(fourteenth);


var fifteenth = 0 || '0' && 1;
// 1. Проводиться операція зліва: 0 || '0', де результатом буде '0', яке є не пустою строкою, а отже є true
// 2. Тепер можемо виконати операцію '0' && 1, де за умови того, що всі операнди є true, результатом є останнє обчислене значення --> 1
console.log(fifteenth);


var sixteenth = (+null == false) < 1;
// 1. За допомогою унарного плюса "+null" приводиться до числа 0
// 2. Для здійснення порівняння в дужках число 0 приводиться до буленового значення false
// і оскільки false == false є true стейтмент, то в дужках отримуємо значення true
// Для порівняння "true < 1", приводимо true до числа 1, а вираз 1 < 1 не є істинним, отже результат - false
console.log(sixteenth);


var seventeenth = false && true || true;
// 1. При порівняння лівої частини виразу "false && true" отримуємо результат false
// 2. Тепер маємо вираз "false || true", результатом виразу є перший операнд зі значенням true - отже, результат --> true
console.log(seventeenth);


var eighteenth = false && (false || true);
// 1. Спрочатку розраховуємо результат операції в дужках: false || true , де результатом буде true
// 2. Тепер маємо вираз: false && true , який є falsy --> отримуємо результат false
console.log(eighteenth);


var nineteenth = (+null == false) < 1 ** 5;
// 1. Розраховуємо значення в дужках:
// +null --> приводиться до числа 0
// для здійснення порівняння 0 приводиться до значення false
// false == false - це істинний вираз результат якого --> true
// 2. Тепер зводимо 1**5, результатом є 1
// Отримуємо вираз true < 1 
// 3. Приводимо true до числа 1
// 4. 1 < 1 є falsy виразом, отже результат є false
console.log(nineteenth);